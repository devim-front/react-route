import { StaticContext } from './StaticContext';
/**
 * Состояние роутера при использования его во время Server Side Rendering.
 * Экземпляр данного класса помещается в свойство <Router state={} /> при
 * отрисовке приложения на сервере, и по её завершеню
 * будет содержать HTTP-статус ответа сервера и адрес страницы, куда должен
 * быть перенаправлен пользователь (если во время отрисовки возникло
 * перенаправление). Также состояние роутера может быть использовано для
 * рендера приложения с асинхронной подгрузкой данных.
 */
export declare class RouterState {
    /**
     * Объект контекста StaticRouter.
     */
    private context;
    /**
     * Список неразрешенных обещаний приложения.
     */
    private promises;
    /**
     * Указывает, что приложение завершило свой цикл отрисовок.
     */
    isRendered: boolean;
    /**
     * Задаёт контект роутера.
     *
     * @internal
     * @param context Объект контекста роутера.
     */
    setContext(context: StaticContext): void;
    /**
     * Добавляет неразрешенное обещание в общих список обещаний.
     *
     * @internal
     * @param promise Обещание.
     */
    addPromise(promise: Promise<void>): void;
    /**
     * Адрес страницы, куда должен быть перенаправлен пользователь, если
     * приложение сгенерировало перенаправление во время рендера.
     */
    get redirectUrl(): string | undefined;
    /**
     * Код ответа HTTP.
     */
    get status(): number;
    /**
     * Указывает, что во время рендера приложение сгенерировало перенаправление
     * на другую страницу.
     */
    get isRedirect(): boolean;
    /**
     * Указывает, что приложение не нашло обработчика для указанной страницы (
     * иными словами, клиенту должна быть показана страница 404).
     */
    get isNotFound(): boolean;
    /**
     * Указывает, что приложение вернуло статус 200 во время рендера (то есть,
     * обработчик для страницы нашёлся, и не возникло перенаправлений на другие
     * страницы).
     */
    get isOk(): boolean;
    /**
     * Возвращает обещание, после разрешения которого нужно произвести очередной
     * рендер приложения, так как его состояние изменилось.
     */
    next(): Promise<void>;
    /**
     * Указывает, что приложению требуется повторная отрисовка, так как цикл
     * изменения его состояний ещё не завершен.
     */
    get isNotRendered(): boolean;
}
